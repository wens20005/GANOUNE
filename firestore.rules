rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isTeacher() {
      return isSignedIn() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
    }
    
    function isAdmin() {
      return isSignedIn() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isTeacherOrAdmin() {
      return isTeacher() || isAdmin();
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isTeacherOrAdmin());
      allow create: if isSignedIn() && isOwner(userId) && 
                       request.resource.data.keys().hasAll(['email', 'role', 'createdAt']);
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin()) &&
                       (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']));
      allow delete: if isAdmin();
    }
    
    // Courses collection
    match /courses/{courseId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isTeacherOrAdmin();
      
      // Course enrollment
      match /enrollments/{userId} {
        allow read: if isSignedIn() && (isOwner(userId) || isTeacherOrAdmin());
        allow create: if isSignedIn() && isOwner(userId);
        allow update, delete: if isTeacherOrAdmin();
      }
    }
    
    // Lessons collection
    match /lessons/{lessonId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isTeacherOrAdmin();
    }
    
    // Exercises collection
    match /exercises/{exerciseId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isTeacherOrAdmin();
    }
    
    // Student submissions
    match /submissions/{userId}/{submissionId} {
      allow read, create, update: if isSignedIn() && (isOwner(userId) || isTeacherOrAdmin());
      allow delete: if isTeacherOrAdmin();
    }
    
    // Grades
    match /grades/{userId}/{gradeId} {
      allow read: if isSignedIn() && (isOwner(userId) || isTeacherOrAdmin());
      allow create, update, delete: if isTeacherOrAdmin();
    }
    
    // Achievements
    match /achievements/{userId}/{achievementId} {
      allow read: if isSignedIn() && (isOwner(userId) || isTeacherOrAdmin());
      allow create, update, delete: if isTeacherOrAdmin();
    }
    
    // Exams
    match /exams/{examId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isTeacherOrAdmin();
      
      // Exam attempts
      match /attempts/{userId} {
        allow read, create, update: if isSignedIn() && (isOwner(userId) || isTeacherOrAdmin());
        allow delete: if isTeacherOrAdmin();
      }
    }
    
    // Security logs (admin only)
    match /security_logs/{logId} {
      allow read, write: if isAdmin();
    }
    
    // AI analysis results
    match /ai_analyses/{analysisId} {
      allow read: if isSignedIn() && 
                     (resource.data.studentId == request.auth.uid || isTeacherOrAdmin());
      allow create, update, delete: if isTeacherOrAdmin();
    }
    
    // Chat messages (only if they belong to user)
    match /chat_messages/{userId}/{messageId} {
      allow read, create, update: if isSignedIn() && isOwner(userId);
      allow delete: if isTeacherOrAdmin();
    }
    
    // Deny all other paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}